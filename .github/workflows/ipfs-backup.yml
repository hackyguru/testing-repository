
      name: IPFS Backup

      on:
        push:
          branches:
            - main
            - master
        workflow_dispatch:
      
      jobs:
        backup:
          runs-on: ubuntu-latest
          permissions:
            contents: write
          env:
            UPLOAD_ID: ${{ github.run_id }}
          steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                fetch-depth: 0
      
            - name: Get commit hash
              id: commit
              run: echo "hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
      
            - name: Upload to IPFS
              id: upload
              env:
                COMMIT_HASH: ${{ steps.commit.outputs.hash }}
              run: |
                # Set API URL
                API_URL="${{ vars.NEXT_PUBLIC_API_URL || 'https://www.gitvault.xyz' }}"
                echo "API URL: $API_URL"
                
                # Calculate total chunks
                CHUNK_SIZE=50000000 # 50MB chunks
                TOTAL_CHUNKS=$(tar -czf - --exclude='.git' . | wc -c | awk -v size=$CHUNK_SIZE '{print int(($1+size-1)/size)}')
                echo "Total chunks: $TOTAL_CHUNKS"
                
                # Create temporary directory for chunks
                TEMP_DIR=$(mktemp -d)
                echo "Temp directory: $TEMP_DIR"
                
                # Split repository into chunks
                cd $TEMP_DIR
                tar -C $GITHUB_WORKSPACE -czf - --exclude='.git' . | split -b $CHUNK_SIZE - chunk-
                
                # Upload each chunk
                CHUNK_NUM=1
                for chunk in chunk-*; do
                  echo "Uploading chunk $CHUNK_NUM of $TOTAL_CHUNKS"
                  RESPONSE=$(curl -X POST                     -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}"                     -H "X-GitHub-Repository: ${{ github.repository }}"                     -H "X-Upload-Id: ${{ env.UPLOAD_ID }}"                     -H "X-Chunk-Number: $CHUNK_NUM"                     -H "X-Total-Chunks: $TOTAL_CHUNKS"                     -H "X-GitHub-Commit-Hash: $COMMIT_HASH"                     -H "X-GitHub-Username: ${{ github.actor }}"                     -F "chunk=@$chunk"                     "$API_URL/api/storage/upload/chunk")
                  echo "Response: $RESPONSE"
                  CHUNK_NUM=$((CHUNK_NUM+1))
                done
                
                # Cleanup temporary directory
                rm -rf $TEMP_DIR
                
                # Complete upload with retries
                success=false
                retry_count=0
                
                while [ $success = false ] && [ $retry_count -lt $MAX_RETRIES ]; do
                  echo "Completing upload (Attempt $((retry_count + 1)))"
                  
                  COMPLETE_RESPONSE=$(curl --max-time $CURL_TIMEOUT -X POST \
                    -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                    -H "Content-Type: application/json" \
                    -H "X-GitHub-Repository: ${{ github.repository }}" \
                    -H "X-GitHub-Commit-Hash: $COMMIT_HASH" \
                    -H "X-GitHub-Username: ${{ github.actor }}" \
                    -d "{\"uploadId\":\"${{ env.UPLOAD_ID }}\"}" \
                    "$API_URL/api/storage/upload/complete" || echo "CURL_ERROR")
                  
                  if [ "$COMPLETE_RESPONSE" = "CURL_ERROR" ]; then
                    echo "Curl failed for completion request"
                    retry_count=$((retry_count + 1))
                    [ $retry_count -lt $MAX_RETRIES ] && sleep 5
                    continue
                  fi
                  
                  # Validate JSON response with better error handling
                  if echo "$COMPLETE_RESPONSE" | jq -e . >/dev/null 2>&1; then
                    success=true
                    echo "Upload completed successfully"
                    
                    # Extract CID with error handling
                    CID=$(echo "$COMPLETE_RESPONSE" | jq -r '.cid // empty')
                    if [ -n "$CID" ]; then
                      echo "CID: $CID"
                      echo "cid=$CID" >> $GITHUB_OUTPUT
                    else
                      echo "Error: CID not found in response"
                      echo "Full response: $COMPLETE_RESPONSE"
                      exit 1
                    fi
                  else
                    echo "Invalid JSON response from complete endpoint"
                    echo "Raw response: $COMPLETE_RESPONSE"
                    retry_count=$((retry_count + 1))
                    [ $retry_count -lt $MAX_RETRIES ] && sleep 5
                  fi
                done
                
                if [ $success = false ]; then
                  echo "Failed to complete upload after $MAX_RETRIES attempts"
                  exit 1
                fi
      
            - name: Update .gitvault and README
              if: steps.upload.outputs.cid != ''
              run: |
                # Create or update .gitvault file with history
                if [ -f .gitvault ]; then
                  # Preserve existing content and add new entry
                  TEMP_FILE=$(mktemp)
                  # Get the latest CID section
                  grep -B1 "^cid:" .gitvault > $TEMP_FILE || true
                  echo "history:" >> $TEMP_FILE
                  grep -A100 "^history:" .gitvault | tail -n +2 >> $TEMP_FILE || true
                  # Add current CID to history
                  echo "  - cid: ${{ steps.upload.outputs.cid }}" >> $TEMP_FILE
                  echo "    date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $TEMP_FILE
                  # Update latest CID
                  echo "latest:" > .gitvault
                  echo "  cid: ${{ steps.upload.outputs.cid }}" >> .gitvault
                  echo "  date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> .gitvault
                  cat $TEMP_FILE >> .gitvault
                  rm $TEMP_FILE
                else
                  # Create new .gitvault file
                  echo "latest:" > .gitvault
                  echo "  cid: ${{ steps.upload.outputs.cid }}" >> .gitvault
                  echo "  date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> .gitvault
                  echo "history:" >> .gitvault
                  echo "  - cid: ${{ steps.upload.outputs.cid }}" >> .gitvault
                  echo "    date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> .gitvault
                fi
      
                # Update README.md with badge (always shows latest CID)
                if [ -f README.md ]; then
                  # Remove old badge if exists
                  sed -i '/^[![GitVault Backup]/d' README.md
                  # Add new badge at the top
                  sed -i "1i [![GitVault Backup](https://img.shields.io/badge/GitVault-Protected-blue)](https://ipfs.io/ipfs/${{ steps.upload.outputs.cid }})" README.md
                else
                  # Create README.md with badge
                  echo "[![GitVault Backup](https://img.shields.io/badge/GitVault-Protected-blue)](https://ipfs.io/ipfs/${{ steps.upload.outputs.cid }})" > README.md
                fi
      
                # Configure git
                git config --global user.name "GitVault Bot"
                git config --global user.email "bot@gitvault.app"
                
                # Commit and push changes
                git add .gitvault README.md
                git commit -m "Update GitVault CID and README badge [skip ci]" || exit 0
                git push
